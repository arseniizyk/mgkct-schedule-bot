services:
    nats:
        image: nats
        ports:
            - '4223:4222'
            - '8222:8222' # мониторинг
        command: '-DV -m 8222'
        restart: unless-stopped

    tg-bot:
        build:
            context: .
            dockerfile: services/tg-bot/Dockerfile
        container_name: tg-bot
        command: ./tg-bot
        env_file:
            - .env
        depends_on:
            # scraper:
            # condition: service_healthy #TODO healthcheck for scraper
            nats:
                condition: service_started
            tg-bot-postgres:
                condition: service_healthy
        restart: unless-stopped
        environment:
            - POSTGRES_HOST=tg-bot-postgres

    scraper:
        build:
            context: .
            dockerfile: services/scraper/Dockerfile
        container_name: scraper
        command: ./scraper
        env_file:
            - .env
        depends_on:
            nats:
                condition: service_started
            scraper-postgres:
                condition: service_healthy
        restart: unless-stopped
        ports:
            - '9001:9001'
        environment:
            - POSTGRES_HOST=scraper-postgres

    scraper-postgres:
        image: postgres
        container_name: scraper-postgres
        restart: unless-stopped
        volumes:
            - ./migrations/scraper:/docker-entrypoint-initdb.d/
        env_file:
            - .env
        ports:
            - '5433:5432'
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
            interval: 3s
            timeout: 3s
            retries: 5

    tg-bot-postgres:
        image: postgres
        container_name: tg-bot-postgres
        restart: unless-stopped
        volumes:
            - ./migrations/tg-bot:/docker-entrypoint-initdb.d/
        env_file:
            - .env
        ports:
            - '5434:5432'
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
            interval: 3s
            timeout: 3s
            retries: 5

    adminer:
        image: adminer
        restart: unless-stopped
        ports:
            - '8080:8080'
        environment:
            - ADMINER_DEFAULT_SERVER=scraper-postgres,tg-bot-postgres
